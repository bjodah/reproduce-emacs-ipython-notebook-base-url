#!/bin/bash
# -*- mode: shell-script-mode -*-
#
# The curly braces on the line below allows us to edit this file without worrying
# if doing so while the script is running.
{
    IMAGE=alpine:latest # e.g. python:alpine, ubuntu:jammy   # the default image
    CONTAINER_FOLDER=""
    NAME=""
    WITH_X11=0
    DO_MOUNT_CWD=1
    show_help(){
        echo "Launch an container using podman-run with some defaults:"
        echo " - mounts current working directory with literal absolute path"
        echo " - remove container after exit (ephemeral container)"
        echo " - seccomp=unconfined (needed for e.g. clang's address sanitizer)"
        echo " - detach key is set not to interfere with Ctrl-p which is often 'previous'"
        echo " - TERM environment variable is set to xterm-256color"
        echo ""
        echo "also supports building & caching container images on-the-fly."
        echo ""
        echo "Usage:"
        echo "--image                  name of containerimage, default: $IMAGE, e.g. ubuntu:jammy"
        echo "--container-folder       name of container folder to build image from (overrides --image)"
        echo "--name                   name of containerimage, default is basename of image"
        echo "--x11                    set DISPLAY, mount X11 socket folder."
        echo "--no-mount-cwd           disable default mounting of current working directory"
        echo ""
        echo "Example:"
        echo ' $ podrun -v ~/.ssh:/root/.ssh -v ~/.gnupg:/root/.gnupg --image alpine:latest'
        echo ' $ podrun --x11 --image docker.io/silex/emacs:master-alpine -- emacs ~/.bashrc '
        echo ' $ podrun --x11 --container-folder ~/dotfiles/containers/gccemacs-doom -- ~/.emacs.d/bin/doom sync; emacs ~/.bashrc '
    }
    declare -a PODMAN_RUN_ARGS
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help|\?)
                show_help
                exit 0
                ;;
            --name)
                shift
                NAME=$1
                shift
                ;;
            --no-mount-cwd)
                DO_MOUNT_CWD=0
                shift
                ;;
            --image)
                shift
                IMAGE=$1
                shift
                ;;
            --container-folder)
                shift
                CONTAINER_FOLDER=$1
                shift
                ;;
            --x11)
                WITH_X11=1
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                PODMAN_RUN_ARGS+=("$1")
                shift
                ;;
                # show_help
                # exit 1
                # ;;
        esac
    done

    if [ $# -eq 0 ]; then
        >&2 echo "No command to execute, exiting."
        exit 1
    fi
    if [[ $WITH_X11 == 1 ]]; then
        PODMAN_RUN_ARGS+=("-e DISPLAY=$(echo $DISPLAY | sed 's/localhost/127.0.0.1/g')")
        PODMAN_RUN_ARGS+=("-v /tmp/.X11-unix:/tmp/.X11-unix:rw")
        PODMAN_RUN_ARGS+=("-v $HOME/.Xauthority:/root/.Xauthority:rw")
	# # https://github.com/containers/podman/discussions/13040#discussioncomment-2071464
	# PODMAN_RUN_ARGS+=("--uidmap $(id -u):0:1")
	# PODMAN_RUN_ARGS+=("--gidmap $(id -g):0:1")
	# PODMAN_RUN_ARGS+=("--gidmap 0:1:$(id -g)")
	#
	# The above doesn't really work, podman starts *copying* the whole filesystem
	# with 'storage-chown-by-maps' consuming all CPU and disk read-write.
	#
	# Instead pass the following to 
#          --user $UID:$GID \
#	   -e LOGNAME \
#          --cap-add=SYS_PTRACE \

	PODMAN_RUN_ARGS+=("--net host")
    fi

    set -euxo pipefail
    
    if [[ ! -z "$CONTAINER_FOLDER" ]]; then
        if [[ ! -d "$CONTAINER_FOLDER/env" ]]; then
            CANDIDATE_FOLDER="$(dirname $(realpath $BASH_SOURCE))/../../containers/$CONTAINER_FOLDER/"
            if [[ ! -d "$CANDIDATE_FOLDER/env" ]]; then
                >&2 echo "Found no container folder, looked for: $CANDIDATE_FOLDER/env"
                exit 1
            else
                CONTAINER_FOLDER="$CANDIDATE_FOLDER"
            fi
        fi
        if [[ -e $CONTAINER_FOLDER/run-args.sh ]]; then
            source $CONTAINER_FOLDER/run-args.sh
        fi
	ENV_HASH=$(cat "$CONTAINER_FOLDER"/env/* | openssl sha256 | cut -f2 -d' ')
	IMAGE="localhost/$(basename $(realpath ${CONTAINER_FOLDER})):${ENV_HASH:0:8}"
	if ! podman image ls | grep $IMAGE; then
	    podman build -t $IMAGE "$CONTAINER_FOLDER/env"
	fi
    fi

    if [[ $NAME == "" ]]; then
        NAME=$(echo $IMAGE | cut -d: -f1 |  sed 's#/#-#g')
    fi
    if [[ $DO_MOUNT_CWD != 0 ]]; then
        PODMAN_RUN_ARGS+=("-v $PWD:$PWD")
    fi
    podman run \
           ${PODMAN_RUN_ARGS[@]} \
           -e TERM=xterm-256color\
           -w "$PWD" \
           --detach-keys=ctrl-@ \
           --security-opt seccomp=unconfined \
           --rm \
           --name "$NAME" \
           -it "$IMAGE" \
           sh -c "${PRE_CMD:-}$*"
    exit
}
